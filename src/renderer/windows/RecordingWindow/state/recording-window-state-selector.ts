import { createStructuredSelector } from 'reselect';
import { CombinedState } from '_shared/types';
import {
  makeSelectAktruMeetIsBroadcasting,
  makeSelectAudioCaptureEnabled,
  makeSelectAudioCaptureSource,
  makeSelectCameraCaptureEnabled,
  makeSelectCameraCaptureSource,
  makeSelectCameraCaptureSources,
  makeSelectCameraDesktopAudioCaptureEnabled,
  makeSelectDesktopAudioCaptureEnabled,
  makeSelectDesktopCaptureSources,
  makeSelectDesktopCaptureEnabled,
  makeSelectDesktopCaptureSource,
  makeSelectRecordingEntry,
  makeSelectRecordingPathFreeSpace,
  makeSelectRecordingStatus,
  makeSelectSettingAudioBitrate,
  makeSelectSettingDualCamModeEnabled,
  makeSelectSettingMirrorCamera,
  makeSelectSettingPtzCameraControlsEnabled,
  makeSelectSettingPtzCameraDefaultPresetIndex,
  makeSelectSettingRecordingPath,
  makeSelectSettingResetPtzCameraPreset,
  makeSelectSettingScheduleEnabled,
  makeSelectSettingVideoBitrate,
  makeSelectSettingVideoCodec,
  makeSelectSettingVideoResolution,
} from '_shared/selectors';
import { RecordingWindowStateSelection } from '_renderer/windows/RecordingWindow/types';

export const recordingWindowStateSelector = createStructuredSelector<CombinedState, RecordingWindowStateSelection>({
  aktruMeetIsBroadcasting: makeSelectAktruMeetIsBroadcasting(),
  availableCameraCaptureSources: makeSelectCameraCaptureSources(),
  availableDesktopCaptureSources: makeSelectDesktopCaptureSources(),
  audioBitrate: makeSelectSettingAudioBitrate(),
  audioCaptureEnabled: makeSelectAudioCaptureEnabled(),
  audioCaptureSource: makeSelectAudioCaptureSource(),
  cameraCaptureEnabled: makeSelectCameraCaptureEnabled(),
  cameraCaptureSource: makeSelectCameraCaptureSource(),
  cameraDesktopAudioCaptureEnabled: makeSelectCameraDesktopAudioCaptureEnabled(),
  desktopAudioCaptureEnabled: makeSelectDesktopAudioCaptureEnabled(),
  desktopCaptureEnabled: makeSelectDesktopCaptureEnabled(),
  desktopCaptureSource: makeSelectDesktopCaptureSource(),
  dualCamModeEnabled: makeSelectSettingDualCamModeEnabled(),
  entry: makeSelectRecordingEntry(),
  mirrorCamera: makeSelectSettingMirrorCamera(),
  ptzCameraControlsEnabled: makeSelectSettingPtzCameraControlsEnabled(),
  ptzCameraDefaultPresetIndex: makeSelectSettingPtzCameraDefaultPresetIndex(),
  recordingPath: makeSelectSettingRecordingPath(),
  recordingPathFreeSpace: makeSelectRecordingPathFreeSpace(),
  resetPtzCameraPreset: makeSelectSettingResetPtzCameraPreset(),
  scheduleEnabled: makeSelectSettingScheduleEnabled(),
  status: makeSelectRecordingStatus(),
  videoBitrate: makeSelectSettingVideoBitrate(),
  videoCodec: makeSelectSettingVideoCodec(),
  videoResolution: makeSelectSettingVideoResolution(),
});
